services:
  app:
    build:
      context: ${PWD}
      dockerfile: Dockerfile
      network: host
    ports:
      - "5000:5000"
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
        restart: true
      events:
        condition: service_healthy
        restart: true
      ai:
        condition: service_started
  db:
    build:
      context: ./demo/postgress
      dockerfile: Dockerfile
      network: host
    container_name: db
    command: postgres -c shared_preload_libraries=pg_net -c pg_net.enabled_workers=1
    volumes:
      - ./database:/docker-entrypoint-initdb.d
    env_file:
      - .env
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
  db-admin:
    image: dpage/pgadmin4:9.7.0
    container_name: db-admin
    environment:
      - PGADMIN_DEFAULT_EMAIL=email@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_LISTEN_PORT=15432
    ports:
      - "15432:15432"
    networks:
      - app-network
  events:
    image: rabbitmq:4.1-management
    container_name: events
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network
  ai:
    image: ollama/ollama:0.11.4
    container_name: ai
    restart: no
    volumes:
      - ./etc/ollama/ollama-entrypoint.sh:/ollama-entrypoint.sh
      - ./etc/ollama/ollama-healthcheck.sh:/ollama-healthcheck.sh
    entrypoint:
      - "/ollama-entrypoint.sh"
    healthcheck:
      test: ["CMD", "/ollama-healthcheck.sh"]
      interval: 30s
      retries: 5
      start_period: 2m
      timeout: 30s
    ports:
      - "11434:11434"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  database:
